// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator kysely {
  provider = "prisma-kysely"
  output   = "../src/lib/server"
  fileName = "schema.ts"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Anime {
  id                    Int      @id
  title                 String
  pictureMedium         String?
  pictureLarge          String?
  startDate             String?
  endDate               String?
  nsfw                  String?
  createdAt             DateTime
  updatedAt             DateTime
  largePictureUpdatedAt DateTime @default(now())
  mediaType             String
  status                String
  episodes              Int
  season                String?
  seasonYear            Int?
  source                String?
  genres                String
  isSequel              Boolean?

  AnimeRecommendation AnimeRecommendation[]

  @@index([createdAt])
  @@index([largePictureUpdatedAt])
}

model Manga {
  id                    Int      @id
  title                 String   @db.VarChar(511)
  pictureMedium         String?
  pictureLarge          String?
  startDate             String?
  endDate               String?
  nsfw                  String?
  createdAt             DateTime
  updatedAt             DateTime
  largePictureUpdatedAt DateTime @default(now())
  mediaType             String
  status                String
  volumes               Int?
  chapters              Int?
  source                String?
  genres                String

  MangaRecommendation MangaRecommendation[]

  @@index([createdAt])
  @@index([largePictureUpdatedAt])
}

model User {
  id             Int      @id
  name           String   @unique
  picture        String?
  followersCount Int      @default(0) @db.UnsignedInt
  followingCount Int      @default(0) @db.UnsignedInt
  createdAt      DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamp()

  Recommendation      AnimeRecommendation[]
  MangaRecommendation MangaRecommendation[]
  follower            Follower[]            @relation("follower")
  followedUser        Follower[]            @relation("followedUser")
}

model AnimeRecommendation {
  id        Int      @id @default(autoincrement())
  animeId   Int
  userId    Int
  createdAt DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamp()

  anime Anime @relation(fields: [animeId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@unique([animeId, userId])
  @@index([animeId])
  @@index([userId])
}

model MangaRecommendation {
  id        Int      @id @default(autoincrement())
  mangaId   Int
  userId    Int
  createdAt DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamp()

  manga   Manga @relation(fields: [mangaId], references: [id])
  user    User  @relation(fields: [userId], references: [id])
  animeId Int?

  @@unique([mangaId, userId])
  @@index([mangaId])
  @@index([userId])
}

model Follower {
  id             Int      @id @default(autoincrement())
  userId         Int
  followedUserId Int
  createdAt      DateTime @default(dbgenerated("CURRENT_TIMESTAMP")) @db.Timestamp()

  user         User @relation(name: "follower", fields: [userId], references: [id])
  followedUser User @relation(name: "followedUser", fields: [followedUserId], references: [id])

  @@unique([userId, followedUserId])
  @@index([userId])
  @@index([followedUserId])
}
